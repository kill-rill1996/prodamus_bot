import json
from datetime import datetime, timedelta

import pytz
from fastapi import FastAPI, Request
from prodamuspy import ProdamusPy
import requests
from starlette import status

from orm import AsyncOrm
from settings import settings
from schemas import User, ResponseResultPayment

app = FastAPI()


@app.get("/")
async def root():
    return {"message": "some message"}


# –ü–û–ö–£–ü–ö–ê –ü–û–î–ü–ò–°–ö–ò
@app.post("/success_pay", status_code=status.HTTP_200_OK)
async def body(request: Request):
    response = await get_body_params_pay_success(request)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    if not(response.sing_is_good and response.payment_status == "success"):
        await send_error_message_to_user(int(response.tg_id))

    # —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    else:
        user = await AsyncOrm.get_user_with_subscription_by_tg_id(response.tg_id)
        sub_status: bool = user.subscription[0].active  # —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å (–¥–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ TODO –º–± –∑–∞–º–µ–Ω—è—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∫–∞–∂–¥—ã–π —Ä–∞–∑
        if not user.phone:
            await AsyncOrm.update_user_phone(user.id, response.customer_phone)

        # –º–µ–Ω—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ TODO –º–± —Å–¥–µ–ª–∞—Ç—å –ø–ª—é—Å —á–∞—Å —á—Ç–æ–±—ã –±—ã–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂
        await AsyncOrm.update_subscribe(user.id, response.date_last_payment, response.date_next_payment)

        # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –ø—Ä–æ–¥–ª–∏–ª–∞—Å—å TODO —Ç–∞–∫–æ–≥–æ —Å–ª—É—á–∞—è –Ω–µ –±—É–¥–µ—Ç, –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É url
        if sub_status:
            pass

        # –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        else:
            invite_link = await generate_invite_link(user)
            await send_invite_link_to_user(int(user.tg_id), invite_link)


# –ê–í–¢–û–ü–õ–ê–¢–ï–ñ –ü–û –ü–û–î–ü–ò–°–ö–ï
@app.post("/auto_pay", status_code=status.HTTP_200_OK)
async def auto_pay_subscription(request: Request):
    """–ü—Ä–∏–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    response = await get_body_params_pay_success(request)

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    if not (response.sing_is_good and response.payment_status == "success"):
        await send_auto_pay_error_message_to_user(int(response.tg_id))

    else:
        user = await AsyncOrm.get_user_with_subscription_by_tg_id(response.tg_id)

        # –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –µ—Å–ª–∏ –µ—â–µ –Ω–µ –±—ã–ª–æ TODO –º–± —É–±—Ä–∞—Ç—å —Ç—É—Ç –∑–∞–º–µ–Ω—É
        if not user.phone:
            # await AsyncOrm.update_user_phone(user.id, response.customer_phone)
            await AsyncOrm.update_user_phone(1, response.customer_phone)

        # –º–µ–Ω—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ TODO –º–± —Å–¥–µ–ª–∞—Ç—å –ø–ª—é—Å —á–∞—Å —á—Ç–æ–±—ã –±—ã–ª–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–ª–∞—Ç–µ–∂
        # await AsyncOrm.update_subscribe(user.id, response.date_last_payment, response.date_next_payment)
        await AsyncOrm.update_subscribe(1, response.date_last_payment, response.date_next_payment)

        await send_success_message_to_user(420551454, response.date_next_payment)


async def generate_invite_link(user: User) -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
    expire_date = datetime.now(tz=pytz.timezone('Europe/Moscow')) + timedelta(days=1)
    name = user.username if user.username else user.firstname
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "createChatInviteLink"),
        data={
            "chat_id": settings.channel_id,
            "name": name,
            "expire_date": int(expire_date.timestamp()),
            "member_limit": 1,
        }
    )
    invite_link = response.json()["result"]["invite_link"]
    print(invite_link)

    return invite_link


async def send_invite_link_to_user(chat_id: int, link: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={'chat_id': chat_id,
              'text': '–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª',
              "reply_markup": json.dumps(
                  {"inline_keyboard": [[{"text": "üîó–í—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª", "url": link}]]},
                  separators=(',', ':'))
              }
    ).json()
    print(response)


async def send_error_message_to_user(chat_id: int) -> None:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={'chat_id': chat_id,
              'text': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏',
              }
    ).json()


async def send_auto_pay_error_message_to_user(chat_id: int) -> None:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–ø–ª–∞—Ç–µ"""
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={'chat_id': chat_id,
              'text': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ',
              }
    ).json()


async def send_success_message_to_user(chat_id: int, expire_date: datetime) -> None:
    """–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    response = requests.post(
        url='https://api.telegram.org/bot{0}/{1}'.format(settings.bot_token, "sendMessage"),
        data={'chat_id': chat_id,
              'text': f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {expire_date}',
              }
    ).json()


async def get_body_params_pay_success(request: Request) -> ResponseResultPayment:
    """–î–ª—è –ø—Ä–∏–µ–º–∞ body —É –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    prodamus = ProdamusPy(settings.pay_token)

    body = await request.body()
    bodyDict = prodamus.parse(body.decode())
    print(f"DECODED BODY: {bodyDict}")

    # TODO –¥–æ–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –µ—Å–ª–∏ –ø–æ–¥–¥–µ–ª–∫–∞
    signIsGood = prodamus.verify(bodyDict, request.headers["sign"])
    print(signIsGood)

    result = ResponseResultPayment(
        tg_id=bodyDict["order_num"],
        payment_status=bodyDict["payment_status"],
        sing_is_good=signIsGood,
        customer_phone=bodyDict["customer_phone"],
        date_last_payment=datetime.strptime(bodyDict["subscription"]["date_last_payment"], '%Y-%m-%d %H:%M:%S'),    # '2024-12-26 22:08:59'
        date_next_payment=datetime.strptime(bodyDict["subscription"]["date_next_payment"], '%Y-%m-%d %H:%M:%S')    # '2024-12-26 22:08:59'
    )

    print(result)
    return result